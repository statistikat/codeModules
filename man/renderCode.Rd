% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/renderCode.R
\name{renderCode}
\alias{renderCode}
\alias{codeOutput}
\title{Render code with syntax highlighting}
\usage{
renderCode(expr, env = parent.frame(), quoted = FALSE,
  outputArgs = list(), delay = 100)

codeOutput(outputId)
}
\arguments{
\item{expr}{An expression that returns an R object that can be used as an
argument to \code{cat}.}

\item{env}{The environment in which to evaluate \code{expr}.}

\item{quoted}{Is \code{expr} a quoted expression (with \code{quote()})? This
is useful if you want to save an expression in a variable.}

\item{outputArgs}{A list of arguments to be passed through to the implicit
call to \link{codeOutput} when \code{renderCode} is used in an interactive R
Markdown document.}

\item{delay}{How much delay to use (in ms) between rendering and firing the
syntax highlighting script. For \code{length(delay) > 1} the script will fire
multiple times.}

\item{outputId}{output variable to read the code from.}
}
\description{
These functions work similar to \code{renderText} and \code{verbatimTextOutput} but
will include highlighting with \code{highlight.js} and \code{rstudio.css}.
}
\examples{
\dontrun{
shinyApp(
  fluidPage(
    textAreaInput("code_in", NULL, width = "1000px", height = "200px",
      paste("f <- function(x) {2*x + 3}", "f(1)", "#> 5", sep = "\\n")),
    codeOutput("code_out")
  ),
  function(input, output, session){
    output$code_out <- renderCode({
      paste(input$code_in)
    })
  }
)
}
}
